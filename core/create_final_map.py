#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç—Ä–∞–Ω—ã + –±–µ—Ä–µ–≥–æ–≤–∞—è –ª–∏–Ω–∏—è + –º–æ—Ä—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import os
import sys
import math
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from pathlib import Path
from shapely.geometry import box

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.config import (MAP_BOUNDS, FIGURE_SIZE, DPI, 
                              COUNTRY_COLOR, COUNTRY_EDGE_COLOR, COUNTRY_EDGE_WIDTH,
                              SEA_COLOR, SEA_EDGE_COLOR, SEA_EDGE_WIDTH)
from core.water_processor import (load_or_create_water_areas, create_water_from_countries)

def create_final_map(input_file='data/output/merged_countries.geojson', 
                    output_file='data/previews/tactile_map.png',
                    zoom_factor=1.0,
                    fixed_bounds=None,
                    fast_mode=True):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    Args:
        input_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        output_file: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        zoom_factor: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (1.0 = –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∞, 2.0 = —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞)
        fixed_bounds: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã (minx, miny, maxx, maxy) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
                     –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        fast_mode: –µ—Å–ª–∏ True, –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
    """
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        gdf = gpd.read_file(input_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±–æ–≥–∞—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {len(gdf)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        if fixed_bounds is None:
            fixed_bounds = MAP_BOUNDS
            print(f"üó∫Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {fixed_bounds}")
        else:
            print(f"üó∫Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {fixed_bounds}")
        
        minx, miny, maxx, maxy = fixed_bounds
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏)
        clip_box = box(minx, miny, maxx, maxy)
        
        # –û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º
        print("‚úÇÔ∏è  –û–±—Ä–µ–∑–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º...")
        gdf_clipped = gdf.clip(clip_box)
        print(f"‚úÖ –ü–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏: {len(gdf_clipped)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ (—É–∂–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ)
        countries = gdf_clipped[gdf_clipped['feature_type'] == 'country'] if 'feature_type' in gdf_clipped.columns else gdf_clipped
        seas = gdf_clipped[gdf_clipped['feature_type'] == 'sea'] if 'feature_type' in gdf_clipped.columns else None
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
        print("üåä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏...")
        if fast_mode:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            water_gdf = load_or_create_water_areas(
                countries_file=input_file,
                water_file='data/output/water_areas.geojson',
                fixed_bounds=fixed_bounds,
                force_recreate=False
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –ª–µ—Ç—É
            water_gdf = create_water_from_countries(countries, fixed_bounds)
        
        if water_gdf is not None:
            print(f"üåä –í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã")
        else:
            print("‚ö†Ô∏è  –í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        fig, ax = plt.subplots(figsize=FIGURE_SIZE)
        
        # –ë–µ–ª—ã–π —Ñ–æ–Ω
        ax.set_facecolor('white')
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if water_gdf is not None and len(water_gdf) > 0:
            water_gdf.plot(ax=ax, color=SEA_COLOR, 
                          edgecolor=SEA_EDGE_COLOR, linewidth=SEA_EDGE_WIDTH, zorder=1)
            print(f"üåä –í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")
        
        # 2. –ü–æ—Ç–æ–º –º–æ—Ä—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
        if seas is not None and len(seas) > 0:
            seas.plot(ax=ax, color=SEA_COLOR, 
                     edgecolor=SEA_EDGE_COLOR, linewidth=SEA_EDGE_WIDTH, zorder=1)
            print(f"üåä –ú–æ—Ä—è: {len(seas)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # 3. –ü–æ—Ç–æ–º —Å—Ç—Ä–∞–Ω—ã
        if len(countries) > 0:
            countries.plot(ax=ax, color=COUNTRY_COLOR, 
                          edgecolor=COUNTRY_EDGE_COLOR, linewidth=COUNTRY_EDGE_WIDTH, zorder=2)
            print(f"üó∫Ô∏è  –°—Ç—Ä–∞–Ω—ã: {len(countries)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        
        # 3. –ë–µ—Ä–µ–≥–æ–≤–∞—è –ª–∏–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ (—É–±—Ä–∞–Ω–æ)
        # if coastline is not None and len(coastline) > 0:
        #     coastline.plot(ax=ax, color='#0d47a1', linewidth=2, zorder=3)
        #     print(f"üèñÔ∏è  –ë–µ—Ä–µ–≥–æ–≤–∞—è –ª–∏–Ω–∏—è: {len(coastline)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        ax.set_title('–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –ë–∞–ª–∫–∞–Ω—ã, –ö–∞–≤–∫–∞–∑ –∏ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫', 
                    fontsize=18, fontweight='bold', pad=20)
        
        # –£–±–∏—Ä–∞–µ–º –æ—Å–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤–∏–¥–∞
        ax.set_xticks([])
        ax.set_yticks([])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
        for spine in ax.spines.values():
            spine.set_edgecolor('#666666')
            spine.set_linewidth(2)
        
        # –†–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        ax.set_aspect('equal')
        
        # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã (–ù–ï –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º
        if zoom_factor != 1.0:
            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            center_x = (minx + maxx) / 2
            center_y = (miny + maxy) / 2
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            width = (maxx - minx) / zoom_factor
            height = (maxy - miny) / zoom_factor
            
            # –ù–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            new_minx = center_x - width / 2
            new_maxx = center_x + width / 2
            new_miny = center_y - height / 2
            new_maxy = center_y + height / 2
        else:
            new_minx, new_miny, new_maxx, new_maxy = minx, miny, maxx, maxy
            width = maxx - minx
            height = maxy - miny
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø (2% –æ—Ç —à–∏—Ä–∏–Ω—ã)
        margin = width * 0.02
        ax.set_xlim(new_minx - margin, new_maxx + margin)
        ax.set_ylim(new_miny - margin, new_maxy + margin)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Å—à—Ç–∞–±–µ
        if zoom_factor != 1.0:
            ax.set_title(f'–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (–º–∞—Å—à—Ç–∞–± x{zoom_factor:.1f}): –ë–∞–ª–∫–∞–Ω—ã, –ö–∞–≤–∫–∞–∑ –∏ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫', 
                        fontsize=18, fontweight='bold', pad=20)
        else:
            ax.set_title('–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: –ë–∞–ª–∫–∞–Ω—ã, –ö–∞–≤–∫–∞–∑ –∏ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫', 
                        fontsize=18, fontweight='bold', pad=20)
        
        # –ò–∑–º–µ–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        if zoom_factor != 1.0:
            base_name = os.path.splitext(output_file)[0]
            ext = os.path.splitext(output_file)[1]
            output_file = f"{base_name}_zoom_{zoom_factor:.1f}x{ext}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        plt.tight_layout()
        plt.savefig(output_file, dpi=DPI, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–†–¢–´:")
        print(f"  –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: {maxx - minx:.1f}¬∞ √ó {maxy - miny:.1f}¬∞")
        print(f"  –û—Ç {minx:.1f}¬∞E –¥–æ {maxx:.1f}¬∞E")
        print(f"  –û—Ç {miny:.1f}¬∞N –¥–æ {maxy:.1f}¬∞N")
        if zoom_factor != 1.0:
            print(f"  –ú–∞—Å—à—Ç–∞–±: x{zoom_factor}")
            print(f"  –ü–æ–∫–∞–∑—ã–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å: {width:.1f}¬∞ √ó {height:.1f}¬∞")
            print(f"  –¶–µ–Ω—Ç—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏—è: {(minx + maxx) / 2:.1f}¬∞E, {(miny + maxy) / 2:.1f}¬∞N")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        return False

def main(zoom_factor=1.0, bounds=None, fast_mode=True):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –¢–ê–ö–¢–ò–õ–¨–ù–û–ô –ö–ê–†–¢–´")
    print("=" * 50)
    
    if fast_mode:
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    
    if zoom_factor != 1.0:
        print(f"üîç –ú–∞—Å—à—Ç–∞–±: x{zoom_factor}")
    
    if bounds:
        print(f"üó∫Ô∏è  –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {bounds}")
    
    # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π - —ç—Ç–æ –Ω–µ –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:
    # python core/water_processor.py
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    success = create_final_map(zoom_factor=zoom_factor, fixed_bounds=bounds, fast_mode=fast_mode)
    
    if success:
        print(f"\nüéâ –ì–û–¢–û–í–û!")
        if zoom_factor != 1.0:
            print(f"üìÅ –§–∞–π–ª: data/previews/tactile_map_zoom_{zoom_factor:.1f}x.png")
        else:
            print("üìÅ –§–∞–π–ª: data/previews/tactile_map.png")
        print("üéØ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   - –ß–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω")
        print("   - –ö—Ä—É–ø–Ω—ã–µ –º–æ—Ä—è")
        print("   - –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–µ—á–∞—Ç–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É")

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    zoom_factor = 1.0
    custom_bounds = None
    
    if len(sys.argv) > 1:
        try:
            zoom_factor = float(sys.argv[1])
            if zoom_factor <= 0:
                print("‚ùå Zoom factor must be positive!")
                print("üí° Usage: python scripts/create_final_map.py [zoom_factor]")
                print("   zoom_factor examples: 1.0 (full map), 1.5 (1.5x zoom), 2.0 (2x zoom), 3.0 (3x zoom)")
                sys.exit(1)
        except ValueError:
            print("‚ùå Invalid zoom factor! Must be a number.")
            print("üí° Usage: python scripts/create_final_map.py [zoom_factor]")
            print("   zoom_factor examples: 1.0 (full map), 1.5 (1.5x zoom), 2.0 (2x zoom), 3.0 (3x zoom)")
            sys.exit(1)
    
    # –ú–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã
    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:
    # –ë–∞–ª–∫–∞–Ω—ã + –ö–∞–≤–∫–∞–∑ + —á–∞—Å—Ç—å –ë–ª–∏–∂–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –†–æ—Å—Å–∏–∏):
    # custom_bounds = (15, 35, 75, 55)
    
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —é–∂–Ω—É—é —á–∞—Å—Ç—å –†–æ—Å—Å–∏–∏:
    # custom_bounds = (15, 35, 85, 60)
    
    # –ë–æ–ª–µ–µ —É–∑–∫–∞—è –æ–±–ª–∞—Å—Ç—å (—Ç–æ–ª—å–∫–æ –ë–∞–ª–∫–∞–Ω—ã + –¢—É—Ä—Ü–∏—è):
    # custom_bounds = (15, 35, 45, 50)
    
    # –§–ª–∞–≥–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
    # save_water —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç core/water_processor.py
    
    main(zoom_factor, custom_bounds)
    
    print(f"\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã:")
    print(f"   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é MAP_BOUNDS –≤ config/map_bounds.py")
    print(f"   –ò–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ custom_bounds –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ")
    print(f"   –§–æ—Ä–º–∞—Ç: (minx, miny, maxx, maxy) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö")
    print(f"   –¢–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã: {MAP_BOUNDS}")
    
    print(f"\nüí° –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:")
    print(f"   1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python core/water_processor.py")
    print(f"   2. –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª data/output/water_areas.geojson")
    print(f"   3. –ü–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ")
    
    if zoom_factor != 1.0:
        print(f"\nüí° Usage examples:")
        print(f"   python core/create_final_map.py        # Full map")
        print(f"   python core/create_final_map.py 1.5    # 1.5x zoom")
        print(f"   python core/create_final_map.py 2.0    # 2x zoom")
        print(f"   python core/create_final_map.py 3.0    # 3x zoom")
