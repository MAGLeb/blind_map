#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
–û—Ç–¥–µ–ª–µ–Ω –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import geopandas as gpd
from shapely.geometry import box
from shapely.ops import unary_union
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from core.config import MAP_BOUNDS


def create_water_areas(input_file='data/output/merged_countries.geojson',
                      output_file='data/output/water_areas.geojson',
                      fixed_bounds=None):
    """–°–æ–∑–¥–∞–µ—Ç –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–∞—Ä—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∞–º–∏
    
    Args:
        input_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
        output_file: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        fixed_bounds: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã (minx, miny, maxx, maxy) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    Returns:
        bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
        gdf = gpd.read_file(input_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω: {len(gdf)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        if fixed_bounds is None:
            fixed_bounds = MAP_BOUNDS
        
        minx, miny, maxx, maxy = fixed_bounds
        clip_box = box(minx, miny, maxx, maxy)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
        countries_clipped = gdf.clip(clip_box)
        print(f"‚úÖ –ü–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ —Å—Ç—Ä–∞–Ω: {len(countries_clipped)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        if len(countries_clipped) > 0:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–Ω—É –≥–µ–æ–º–µ—Ç—Ä–∏—é
            countries_union = unary_union(countries_clipped.geometry)
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å
            water_geometry = clip_box.difference(countries_union)
            
            # –£–ø—Ä–æ—â–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tolerance ~1–∫–º (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.01 –≥—Ä–∞–¥—É—Å–∞)
            water_geometry_simplified = water_geometry.simplify(tolerance=0.01, preserve_topology=True)
            
            if not water_geometry_simplified.is_empty:
                # –°–æ–∑–¥–∞–µ–º GeoDataFrame –¥–ª—è –≤–æ–¥—ã
                water_gdf = gpd.GeoDataFrame([{
                    'feature_type': 'water',
                    'name': 'Water Areas',
                    'area_sq_km': water_geometry_simplified.area * 111320 * 111320  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫–≤.–∫–º
                }], geometry=[water_geometry_simplified], crs='EPSG:4326')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                os.makedirs(os.path.dirname(output_file), exist_ok=True)
                water_gdf.to_file(output_file, driver='GeoJSON')
                
                print(f"‚úÖ –í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
                print(f"üåä –ü–ª–æ—â–∞–¥—å –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {water_geometry_simplified.area * 111320 * 111320:.0f} –∫–≤.–∫–º")
                print(f"üìê –ì–µ–æ–º–µ—Ç—Ä–∏—è —É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞")
                
                return True
            else:
                print("‚ö†Ô∏è  –í–æ–¥–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—É—Å—Ç–∞")
                return False
        else:
            print("‚ùå –ù–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {e}")
        return False


def load_or_create_water_areas(countries_file='data/output/merged_countries.geojson',
                              water_file='data/output/water_areas.geojson',
                              fixed_bounds=None,
                              force_recreate=False):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    Args:
        countries_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
        water_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–¥–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
        fixed_bounds: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        force_recreate: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    
    Returns:
        GeoDataFrame –∏–ª–∏ None: –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    if force_recreate or not os.path.exists(water_file):
        print("üåä –°–æ–∑–¥–∞–µ–º –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏...")
        success = create_water_areas(countries_file, water_file, fixed_bounds)
        if not success:
            return None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    try:
        if os.path.exists(water_file):
            water_gdf = gpd.read_file(water_file)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: {len(water_gdf)} –æ–±—ä–µ–∫—Ç–æ–≤")
            return water_gdf
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {e}")
        return None


def create_water_from_countries(countries_gdf, fixed_bounds=None):
    """–°–æ–∑–¥–∞–µ—Ç –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑ GeoDataFrame —Å—Ç—Ä–∞–Ω (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª)
    
    Args:
        countries_gdf: GeoDataFrame —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
        fixed_bounds: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
    
    Returns:
        GeoDataFrame –∏–ª–∏ None: –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    """
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        if fixed_bounds is None:
            fixed_bounds = MAP_BOUNDS
        
        minx, miny, maxx, maxy = fixed_bounds
        clip_box = box(minx, miny, maxx, maxy)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
        countries_clipped = countries_gdf.clip(clip_box)
        
        if len(countries_clipped) > 0:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–Ω—É –≥–µ–æ–º–µ—Ç—Ä–∏—é
            countries_union = unary_union(countries_clipped.geometry)
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å
            water_geometry = clip_box.difference(countries_union)
            
            # –£–ø—Ä–æ—â–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            water_geometry_simplified = water_geometry.simplify(tolerance=0.01, preserve_topology=True)
            
            if not water_geometry_simplified.is_empty:
                # –°–æ–∑–¥–∞–µ–º GeoDataFrame –¥–ª—è –≤–æ–¥—ã
                water_gdf = gpd.GeoDataFrame([{
                    'feature_type': 'water',
                    'name': 'Water Areas',
                    'area_sq_km': water_geometry_simplified.area * 111320 * 111320
                }], geometry=[water_geometry_simplified], crs='EPSG:4326')
                
                return water_gdf
            else:
                print("‚ö†Ô∏è  –í–æ–¥–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—É—Å—Ç–∞")
                return None
        else:
            print("‚ùå –ù–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {e}")
        return None


def analyze_land_water_ratio(input_file='data/output/merged_countries.geojson',
                             fixed_bounds=None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É—à–∏ –∏ –≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    
    Args:
        input_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
        fixed_bounds: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
    
    Returns:
        dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø–ª–æ—â–∞–¥—è–º–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    """
    
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
        gdf = gpd.read_file(input_file)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        if fixed_bounds is None:
            fixed_bounds = MAP_BOUNDS
        
        minx, miny, maxx, maxy = fixed_bounds
        clip_box = box(minx, miny, maxx, maxy)
        
        # –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–∞—Ä—Ç—ã
        total_area = clip_box.area
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
        countries_clipped = gdf.clip(clip_box)
        
        if len(countries_clipped) > 0:
            # –ü–ª–æ—â–∞–¥—å —Å—É—à–∏
            countries_union = unary_union(countries_clipped.geometry)
            land_area = countries_union.area
            
            # –ü–ª–æ—â–∞–¥—å –≤–æ–¥—ã
            water_area = total_area - land_area
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
            land_percent = (land_area / total_area) * 100
            water_percent = (water_area / total_area) * 100
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
            # (–≥—Ä—É–±–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: 1 –≥—Ä–∞–¥—É—Å ‚âà 111 –∫–º)
            km_factor = 111320 * 111320
            
            stats = {
                'total_area_degrees': total_area,
                'land_area_degrees': land_area,
                'water_area_degrees': water_area,
                'total_area_km2': total_area * km_factor,
                'land_area_km2': land_area * km_factor,
                'water_area_km2': water_area * km_factor,
                'land_percent': land_percent,
                'water_percent': water_percent,
                'bounds': fixed_bounds
            }
            
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –°–£–®–ò –ò –í–û–î–´:")
            print(f"  –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–∞—Ä—Ç—ã: {stats['total_area_km2']:,.0f} –∫–≤.–∫–º")
            print(f"  –°—É—à–∞: {stats['land_area_km2']:,.0f} –∫–≤.–∫–º ({land_percent:.1f}%)")
            print(f"  –í–æ–¥–∞: {stats['water_area_km2']:,.0f} –∫–≤.–∫–º ({water_percent:.1f}%)")
            print(f"  –ì—Ä–∞–Ω–∏—Ü—ã: {minx:.1f}¬∞ - {maxx:.1f}¬∞ E, {miny:.1f}¬∞ - {maxy:.1f}¬∞ N")
            
            return stats
        else:
            print("‚ùå –ù–µ—Ç —Å—Ç—Ä–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
    
    print("üåä –°–û–ó–î–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó –í–û–î–ù–´–• –û–ë–õ–ê–°–¢–ï–ô")
    print("=" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏
    custom_bounds = None
    # custom_bounds = (15, 35, 75, 55)  # –ü—Ä–∏–º–µ—Ä: –ë–∞–ª–∫–∞–Ω—ã + –ö–∞–≤–∫–∞–∑ + —á–∞—Å—Ç—å –ë–ª–∏–∂–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞
    
    bounds = custom_bounds if custom_bounds else MAP_BOUNDS
    
    print(f"üó∫Ô∏è  –ì—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {bounds}")
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É—à–∏ –∏ –≤–æ–¥—ã
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–û–û–¢–ù–û–®–ï–ù–ò–Ø –°–£–®–ò –ò –í–û–î–´:")
    stats = analyze_land_water_ratio(fixed_bounds=bounds)
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –≤–æ–¥–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
    print("\nüåä –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–ê –í–û–î–ù–´–• –û–ë–õ–ê–°–¢–ï–ô:")
    success = create_water_areas(
        input_file='data/output/merged_countries.geojson',
        output_file='data/output/water_areas.geojson',
        fixed_bounds=bounds
    )
    
    if success:
        print(f"\nüéâ –ì–û–¢–û–í–û!")
        print("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
        print("   - data/output/water_areas.geojson")
        print("üéØ –í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   - –ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ create_final_map.py")
        print("   - –ù–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏")
    
    print(f"\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü:")
    print(f"   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é custom_bounds –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ")
    print(f"   –§–æ—Ä–º–∞—Ç: (minx, miny, maxx, maxy) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö")
    print(f"   –¢–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã: {bounds}")


if __name__ == "__main__":
    main()
