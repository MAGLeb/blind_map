import os
import requests
import json

# –°–ø–∏—Å–æ–∫ ISO-–∫–æ–¥–æ–≤
ISO_CODES = [
    'SRB', 'BIH', 'HRV', 'BGR', 'GRC', 'ALB', 'MKD', 'MNE', 'XKX',
    'TUR', 'ARM', 'AZE', 'GEO',
    'SYR', 'LBN', 'ISR', 'JOR', 'IRQ', 'IRN',
    'SAU', 'KWT', 'ARE', 'QAT', 'BHR', 'OMN', 'YEM',
    'EGY', 'LBY',
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    'ITA', 'FRA', 'CHE', 'AUT', 'DEU', 'UKR', 'ROU', 'CYP', 
    'SDN', 'AFG', 'TKM',
    # –ù–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
    'SSD',  # –Æ–∂–Ω—ã–π –°—É–¥–∞–Ω
    'ETH',  # –≠—Ñ–∏–æ–ø–∏—è
    'KAZ',  # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    'PAK',  # –ü–∞–∫–∏—Å—Ç–∞–Ω
    'DJI',  # –î–∂–∏–±—É—Ç–∏ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ö—Ä–∞—Å–Ω–æ–≥–æ –º–æ—Ä—è)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–ª—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    'MDA',  # –ú–æ–ª–¥–æ–≤–∞
    'RUS',  # –†–æ—Å—Å–∏—è (–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è)
    # –°—Ç—Ä–∞–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –°–µ–≤–µ—Ä–Ω–æ–π –ê—Ñ—Ä–∏–∫–µ –∏ –ï–≤—Ä–æ–ø–µ
    'MAR',  # –ú–∞—Ä–æ–∫–∫–æ (–∑–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å –ê—Ñ—Ä–∏–∫–∏)
    'TUN',  # –¢—É–Ω–∏—Å (–º–µ–∂–¥—É –õ–∏–≤–∏–µ–π –∏ –ê–ª–∂–∏—Ä–æ–º)
    'DZA',  # –ê–ª–∂–∏—Ä
    'SVN',  # –°–ª–æ–≤–µ–Ω–∏—è
    'HUN',  # –í–µ–Ω–≥—Ä–∏—è
    'SVK',  # –°–ª–æ–≤–∞–∫–∏—è
    'CZE',  # –ß–µ—Ö–∏—è
    'POL',  # –ü–æ–ª—å—à–∞
    'LTU',  # –õ–∏—Ç–≤–∞
    'LVA',  # –õ–∞—Ç–≤–∏—è
    'EST',  # –≠—Å—Ç–æ–Ω–∏—è
    'BLR',  # –ë–µ–ª–∞—Ä—É—Å—å
    'FIN',  # –§–∏–Ω–ª—è–Ω–¥–∏—è (—Å–µ–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å)
    'SWE',  # –®–≤–µ—Ü–∏—è (—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–∞—è —á–∞—Å—Ç—å)
    'NOR',  # –ù–æ—Ä–≤–µ–≥–∏—è (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏–∏)
    'ESP',  # –ò—Å–ø–∞–Ω–∏—è (—é–≥–æ-–∑–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞)
    'PRT',  # –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è
    'GBR',  # –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (–æ—Å—Ç—Ä–æ–≤–∞)
    'IRL',  # –ò—Ä–ª–∞–Ω–¥–∏—è
    'ISL',  # –ò—Å–ª–∞–Ω–¥–∏—è
    'MLT',  # –ú–∞–ª—å—Ç–∞
    'UZB',  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω (–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è)
    'KGZ',  # –ö–∏—Ä–≥–∏–∑–∏—è
    'TJK',  # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω
    'IND',  # –ò–Ω–¥–∏—è (–≤–æ—Å—Ç–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å –ü–∞–∫–∏—Å—Ç–∞–Ω–æ–º)
    'CHN',  # –ö–∏—Ç–∞–π (—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫ –æ—Ç –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞)
    'MNG',  # –ú–æ–Ω–≥–æ–ª–∏—è (–º–µ–∂–¥—É –†–æ—Å—Å–∏–µ–π –∏ –ö–∏—Ç–∞–µ–º)
    # Additional countries by request
    'NLD',  # Netherlands
    'BEL',  # Belgium
    'LUX',  # Luxembourg
    'NER',  # Niger
    'TCD',  # Chad
    'NGA',  # Nigeria
    'CMR'   # Cameroon
]

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs('data/countries', exist_ok=True)

def download_country(iso):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç GeoJSON –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ ISO-–∫–æ–¥—É"""
    fname = f"data/countries/{iso}.geojson"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    if os.path.exists(fname):
        print(f"‚úì {iso} already exists, skipping download")
        return fname, True  # True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
    
    # –î–ª—è –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ADM1 (—Ä–µ–≥–∏–æ–Ω—ã), –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - ADM0 (–≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω)
    if iso == 'AZE':
        adm_level = 'ADM1'
        print(f"Using ADM1 (regions) for Azerbaijan")
    else:
        adm_level = 'ADM0'
        print(f"Using ADM0 (country boundaries) for {iso}")
    
    url = f"https://www.geoboundaries.org/api/current/gbOpen/{iso}/{adm_level}/"
    print(f"Requesting {adm_level} GeoJSON for {iso} from {url}")
    
    try:
        r = requests.get(url, timeout=30)
        print(f"Status: {r.status_code}")
        
        if r.status_code == 200:
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É –Ω–∞ GeoJSON
            data = r.json()
            if 'gjDownloadURL' in data:
                geojson_url = data['gjDownloadURL']
                
                print(f"Downloading {iso} from {geojson_url}...")
                r2 = requests.get(geojson_url, timeout=60)
                if r2.status_code == 200:
                    with open(fname, 'wb') as f:
                        f.write(r2.content)
                    print(f"‚úì {iso} downloaded successfully")
                    return fname, False  # False –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                else:
                    print(f"‚úó Failed to download GeoJSON for {iso}")
                    return None, False
                
            else:
                print(f"‚úó No GeoJSON URL found for {iso}")
                return None, False
        else:
            print(f"‚úó Failed to get metadata for {iso}: {r.status_code}")
            return None, False
    except Exception as e:
        print(f"‚úó Error downloading {iso}: {e}")
        return None, False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
    files = []
    existing_files = []
    new_downloads = []
    failed_downloads = []
    
    print(f"Starting download for {len(ISO_CODES)} countries...")
    
    for iso in ISO_CODES:
        result = download_country(iso)
        if result[0]:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)
            files.append(result[0])
            if result[1]:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
                existing_files.append(iso)
            else:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω —Å–µ–π—á–∞—Å
                new_downloads.append(iso)
        else:
            failed_downloads.append(iso)
    
    print(f"\n=== Download Summary ===")
    print(f"‚úì Total files available: {len(files)}")
    print(f"üÜï New downloads: {len(new_downloads)}")
    print(f"üìÅ Already existed: {len(existing_files)}")
    print(f"‚ùå Failed downloads: {len(failed_downloads)}")
    
    if new_downloads:
        print(f"\nNewly downloaded countries:")
        for iso in new_downloads:
            print(f"  - {iso}")
    
    if existing_files:
        print(f"\nSkipped (already existed):")
        for iso in existing_files:
            print(f"  - {iso}")
    
    if failed_downloads:
        print(f"\nFailed to download:")
        for iso in failed_downloads:
            print(f"  - {iso}")
    
    if not files:
        print("No GeoJSON files available.")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Download completed! Run 'python scripts/merge_geojson.py' to merge files.")
    else:
        print("\n‚ùå Download failed.")
