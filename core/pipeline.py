#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def run_pipeline():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    
    print("üó∫Ô∏è  –ü–ê–ô–ü–õ–ê–ô–ù –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ö–¢–ò–õ–¨–ù–û–ô –ö–ê–†–¢–´")
    print("=" * 60)
    
    base_path = Path(__file__).parent.parent
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    steps = [
        {
            "step": 1,
            "name": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ GeoJSON —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞–Ω",
            "script": "download_geojson.py",
            "description": "–°–∫–∞—á–∏–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω –∏–∑ OpenStreetMap",
            "input_files": [],
            "output_files": ["data/countries/*.geojson", "data/downloaded_files.json"],
            "optional": False
        },
        {
            "step": 2,
            "name": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ GeoJSON —Ñ–∞–π–ª–æ–≤",
            "script": "merge_countries_geojson.py", 
            "description": "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª",
            "input_files": ["data/countries/*.geojson"],
            "output_files": ["data/output/merged_countries.geojson"],
            "optional": False
        },
        {
            "step": 3,
            "name": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Å–æ—Ç",
            "script": "load_height.py",
            "description": "–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª—å–µ—Ñ–∞ ETOPO1",
            "input_files": [],
            "output_files": ["data/ETOPO1_Bed_g_gmt4.grd"],
            "optional": False
        },
        {
            "step": 4,
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π",
            "script": "water_processor.py",
            "description": "–°–æ–∑–¥–∞–µ—Ç –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
            "input_files": ["data/output/merged_countries.geojson"],
            "output_files": ["data/output/water_areas.geojson"],
            "optional": True
        },
        {
            "step": 5,
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ 2D –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã",
            "script": "create_final_map.py",
            "description": "–°–æ–∑–¥–∞–µ—Ç 2D –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            "input_files": ["data/output/merged_countries.geojson"],
            "output_files": ["data/previews/tactile_map.png"],
            "optional": True
        },
        {
            "step": 6,
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ 3D —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã",
            "script": "create_3d_map.py",
            "description": "–°–æ–∑–¥–∞–µ—Ç 3D STL —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏",
            "input_files": ["data/output/merged_countries.geojson", "data/ETOPO1_Bed_g_gmt4.grd"],
            "output_files": ["data/output/terrain_model.stl"],
            "optional": False
        }
    ]
    
    print("\nüìã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print("-" * 60)
    
    for step in steps:
        status = "‚≠ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if not step["optional"] else "üîπ –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û"
        print(f"\n{step['step']}. {step['name']} {status}")
        print(f"   –°–∫—Ä–∏–ø—Ç: python core/{step['script']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {step['description']}")
        
        if step["input_files"]:
            print(f"   –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(step['input_files'])}")
        if step["output_files"]:
            print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(step['output_files'])}")
    
    print("\n" + "=" * 60)
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –§–ê–ô–õ–û–í:")
    print("-" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    key_files = [
        ("data/countries/", "–ü–∞–ø–∫–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏"),
        ("data/output/merged_countries.geojson", "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã"),
        ("data/ETOPO1_Bed_g_gmt4.grd", "–î–∞–Ω–Ω—ã–µ –≤—ã—Å–æ—Ç"),
        ("data/output/water_areas.geojson", "–í–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
        ("data/previews/tactile_map.png", "2D –ø—Ä–µ–≤—å—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
        ("data/output/terrain_model.stl", "3D –º–æ–¥–µ–ª—å")
    ]
    
    for file_path, description in key_files:
        full_path = base_path / file_path
        check_file_exists(full_path, description)
    
    print("\n" + "=" * 60)
    print("üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
    print("-" * 60)
    
    commands = [
        "# 1. –°–∫–∞—á–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω",
        "python core/download_geojson.py",
        "",
        "# 2. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª", 
        "python core/merge_countries_geojson.py",
        "",
        "# 3. –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã—Å–æ—Ç",
        "python core/load_height.py",
        "",
        "# 4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–æ–∑–¥–∞—Ç—å –≤–æ–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏",
        "python core/water_processor.py",
        "",
        "# 5. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–æ–∑–¥–∞—Ç—å 2D –ø—Ä–µ–≤—å—é",
        "python core/create_final_map.py",
        "",
        "# 6. –°–æ–∑–¥–∞—Ç—å 3D —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
        "python core/create_3d_map.py"
    ]
    
    for cmd in commands:
        print(cmd)
    
    print("\n" + "=" * 60)
    print("üí° –°–û–í–ï–¢–´:")
    print("-" * 60)
    print("‚Ä¢ –®–∞–≥–∏ 1-3 –∏ 6 - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D –∫–∞—Ä—Ç—ã")
    print("‚Ä¢ –®–∞–≥–∏ 4-5 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –Ω—É–∂–Ω—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏")
    print("‚Ä¢ –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–≥–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    print("‚Ä¢ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ MAP_BOUNDS –≤ core/config.py")
    print("‚Ä¢ 3D –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ data/output/terrain_model.stl")

if __name__ == "__main__":
    run_pipeline()
