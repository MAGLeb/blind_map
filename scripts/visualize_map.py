import os
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.colors import ListedColormap
import numpy as np
import pandas as pd

def load_merged_geojson(file_path='data/merged_countries.geojson'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π GeoJSON —Ñ–∞–π–ª"""
    if not os.path.exists(file_path):
        print(f"File {file_path} not found. Run merge_geojson.py first.")
        return None
    
    try:
        gdf = gpd.read_file(file_path)
        print(f"‚úì Loaded {len(gdf)} administrative regions from {file_path}")
        return gdf
    except Exception as e:
        print(f"‚úó Error loading {file_path}: {e}")
        return None

def create_basic_map(gdf, figsize=(15, 10)):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É"""
    fig, ax = plt.subplots(figsize=figsize)
    
    # –ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
    gdf.boundary.plot(ax=ax, linewidth=0.8, color='black')
    
    # –ó–∞–ª–∏–≤–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    colors = plt.cm.Set3(np.linspace(0, 1, len(gdf)))
    gdf.plot(ax=ax, color=colors, alpha=0.3, edgecolor='black', linewidth=0.5)
    
    ax.set_title("–ì—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω (–ë–∞–ª–∫–∞–Ω—ã, –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫, –ö–∞–≤–∫–∞–∑)", fontsize=14)
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')
    
    # –†–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    ax.set_aspect('equal')
    
    return fig, ax

def add_grid_overlay(ax, gdf, grid_size=(3, 2)):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ A5 –∫–∞—Ä—Ç–æ—á–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
    bounds = gdf.total_bounds  # [minx, miny, maxx, maxy]
    minx, miny, maxx, maxy = bounds
    
    # –†–∞–∑–º–µ—Ä—ã —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏
    cell_width = (maxx - minx) / grid_size[0]
    cell_height = (maxy - miny) / grid_size[1]
    
    # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
    for i in range(grid_size[0] + 1):
        x = minx + i * cell_width
        ax.axvline(x, color='red', linestyle='--', alpha=0.7, linewidth=2)
    
    for j in range(grid_size[1] + 1):
        y = miny + j * cell_height
        ax.axhline(y, color='red', linestyle='--', alpha=0.7, linewidth=2)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —è—á–µ–π–∫–∏
    for i in range(grid_size[0]):
        for j in range(grid_size[1]):
            cell_x = minx + (i + 0.5) * cell_width
            cell_y = miny + (j + 0.5) * cell_height
            card_num = j * grid_size[0] + i + 1
            
            ax.text(cell_x, cell_y, f'A5-{card_num}', 
                   ha='center', va='center', 
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8),
                   fontsize=10, fontweight='bold', color='red')
    
    return bounds, cell_width, cell_height

def save_visualization(fig, output_path='data/merged_countries_preview.png'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
    plt.tight_layout()
    fig.savefig(output_path, dpi=200, bbox_inches='tight')
    print(f"‚úì Preview image saved to {output_path}")

def show_map_info(gdf):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ"""
    bounds = gdf.total_bounds
    print(f"\nüìä Map Information:")
    print(f"   Total features: {len(gdf)}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    if 'source_file' in gdf.columns:
        country_counts = gdf['source_file'].value_counts()
        print(f"   Countries and their feature counts:")
        for country, count in country_counts.items():
            print(f"   - {country}: {count} features")
    
    print(f"   Bounds: {bounds}")
    print(f"   Width: {bounds[2] - bounds[0]:.2f}¬∞")
    print(f"   Height: {bounds[3] - bounds[1]:.2f}¬∞")
    print(f"   CRS: {gdf.crs}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    gdf = load_merged_geojson()
    if gdf is None:
        return False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    show_map_info(gdf)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É
    print("\nCreating visualization...")
    fig, ax = create_basic_map(gdf)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –¥–ª—è A5 –∫–∞—Ä—Ç–æ—á–µ–∫
    bounds, cell_width, cell_height = add_grid_overlay(ax, gdf)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    save_visualization(fig)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    plt.show()
    
    print("\n‚úì Visualization completed!")
    print(f"‚úì Grid size: 3x2 (6 A5 cards)")
    print(f"‚úì Cell size: {cell_width:.2f}¬∞ x {cell_height:.2f}¬∞")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Map visualization ready!")
    else:
        print("\n‚ùå Visualization failed.")
